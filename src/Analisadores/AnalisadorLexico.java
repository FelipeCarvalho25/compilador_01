/* Generated By:JavaCC: Do not edit this line. AnalisadorLexico.java */
package Analisadores;
public class AnalisadorLexico implements AnalisadorLexicoConstants {
    static int nCountSintaticError = 0;
    private static StringBuffer mensagens_erros_sintatic = new StringBuffer();
    public String getMessages() {
        return this.token_source.getMensagesManhosas();
     }

    public int getLexError() {
       return this.token_source.foundLexError();
    }
    public int getSintaticError() {
           return this.nCountSintaticError;
        }

    public String getMensagensErros() {
       return this.token_source.getMensagensErros();
    }
   public String getMsgSintaticError() {
          return this.mensagens_erros_sintatic.toString();
       }

  static final public void program() throws ParseException {
    try {
      comentario();
      jj_consume_token(PROGRAM);
      jj_consume_token(ACHAVE);
      declaracao_variaveis();
      corpo_do_programa();
      jj_consume_token(FCHAVE);
      identificador_programa();
      jj_consume_token(0);
    } catch (ParseException e) {
        nCountSintaticError += 1;
        mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void declaracao_variaveis() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
        define();
        break;
      default:
        jj_la1[0] = jj_gen;

      }
    } catch (ParseException e) {
        if(token_source.foundLexError() == 0) {
            nCountSintaticError += 1;
            mensagens_erros_sintatic.append(e.getMessage());
        }
    }
  }

  static final public void define() throws ParseException {
    try {
      jj_consume_token(DEFINE);
      jj_consume_token(ACHAVE);
      estrutura_define();
      jj_consume_token(FCHAVE);
    } catch (ParseException e) {
        if(token_source.foundLexError() == 0) {
             nCountSintaticError += 1;
             mensagens_erros_sintatic.append(e.getMessage());
        }
    }
  }

  static final public void estrutura_define() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        constante();
        variavel_recursiva();
        break;
      case VARIABLE:
        variavel();
        constante_recursiva();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        nCountSintaticError += 1;
        mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void get() throws ParseException {
    try {
      jj_consume_token(GET);
      jj_consume_token(ACHAVE);
      lista_identificadores();
      jj_consume_token(FCHAVE);
      jj_consume_token(PONTO);
    } catch (ParseException e) {
        nCountSintaticError += 1;
        mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void put() throws ParseException {
    try {
      jj_consume_token(PUT);
      jj_consume_token(ACHAVE);
      lista_de_identificadore_constantes();
      jj_consume_token(FCHAVE);
      jj_consume_token(PONTO);
    } catch (ParseException e) {
            nCountSintaticError += 1;
            mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void lista_de_identificadore_constantes() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        lista_de_identificadore_constantes_recursivo();
        break;
      case CONSTANTE_NUM_REAL:
      case CONSTANTE_NUM_INT:
      case CONSTANTE_LIT:
        tipo_constante();
        lista_de_identificadore_constantes_recursivo();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                    nCountSintaticError += 1;
                    mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void tipo_constante() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANTE_NUM_REAL:
        jj_consume_token(CONSTANTE_NUM_REAL);
        break;
      case CONSTANTE_LIT:
        jj_consume_token(CONSTANTE_LIT);
        break;
      case CONSTANTE_NUM_INT:
        jj_consume_token(CONSTANTE_NUM_INT);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                        nCountSintaticError += 1;
                        mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void lista_de_identificadore_constantes_recursivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        jj_consume_token(VIRGULA);
        lista_de_identificadore_constantes();
        break;
      default:
        jj_la1[4] = jj_gen;

      }
    } catch (ParseException e) {
         nCountSintaticError += 1;
         mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void variavel() throws ParseException {
    try {
      jj_consume_token(VARIABLE);
      tipo();
      jj_consume_token(IS);
      lista_identificadores_variavel();
      valor();
      jj_consume_token(PONTO);
      variavel_recursiva();
    } catch (ParseException e) {
        nCountSintaticError += 1;
             mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void constante() throws ParseException {
    try {
      jj_consume_token(NOT);
      jj_consume_token(VARIABLE);
      tipo();
      jj_consume_token(IS);
      lista_identificadores();
      valor();
      jj_consume_token(PONTO);
      constante_recursiva();
    } catch (ParseException e) {
           nCountSintaticError += 1;
                mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void valor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANTE_NUM_INT:
        jj_consume_token(CONSTANTE_NUM_INT);
        break;
      case CONSTANTE_NUM_REAL:
        jj_consume_token(CONSTANTE_NUM_REAL);
        break;
      case CONSTANTE_LIT:
        jj_consume_token(CONSTANTE_LIT);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
               nCountSintaticError += 1;
                    mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void constante_recursiva() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        constante();
        break;
      default:
        jj_la1[6] = jj_gen;

      }
    } catch (ParseException e) {
        nCountSintaticError += 1;
        mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void variavel_recursiva() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        variavel();
        break;
      default:
        jj_la1[7] = jj_gen;

      }
    } catch (ParseException e) {
            nCountSintaticError += 1;
            mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void tipo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATURAL:
        jj_consume_token(NATURAL);
        break;
      case REAL:
        jj_consume_token(REAL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                nCountSintaticError += 1;
                mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void lista_identificadores_variavel() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      lista_identificadores_variavel_recursivo();
    } catch (ParseException e) {
                    nCountSintaticError += 1;
                    mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void lista_identificadores_variavel_recursivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        jj_consume_token(VIRGULA);
        lista_identificadores_variavel();
        break;
      case ACOLCH:
        jj_consume_token(ACOLCH);
        jj_consume_token(CONSTANTE_NUM_INT);
        jj_consume_token(FCOLCH);
        break;
      default:
        jj_la1[9] = jj_gen;

      }
    } catch (ParseException e) {
         nCountSintaticError += 1;
         mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void lista_identificadores() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
      lista_identificadores_recursivo();
    } catch (ParseException e) {
             nCountSintaticError += 1;
             mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void lista_identificadores_recursivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        jj_consume_token(VIRGULA);
        lista_identificadores();
        break;
      default:
        jj_la1[10] = jj_gen;

      }
    } catch (ParseException e) {
                 nCountSintaticError += 1;
                 mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void corpo_do_programa() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECUTE:
        jj_consume_token(EXECUTE);
        jj_consume_token(ACHAVE);
        lista_de_comandos();
        jj_consume_token(FCHAVE);
        break;
      default:
        jj_la1[11] = jj_gen;

      }
    } catch (ParseException e) {
                     nCountSintaticError += 1;
                     mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void lista_de_comandos() throws ParseException {
    try {
      comando();
      comando_recursivo();
    } catch (ParseException e) {
                         nCountSintaticError += 1;
                         mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void comando() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GET:
        get();
        break;
      case PUT:
        put();
        break;
      case VERIFY:
        selecao();
        break;
      case SET:
        atribuicao();
        break;
      case LOOP:
      case WHILE:
        repeticao();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        nCountSintaticError += 1;
        mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void comando_recursivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET:
      case GET:
      case PUT:
      case LOOP:
      case WHILE:
      case VERIFY:
        lista_de_comandos();
        break;
      default:
        jj_la1[13] = jj_gen;

      }
    } catch (ParseException e) {
            nCountSintaticError += 1;
            mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void identificador_programa() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      default:
        jj_la1[14] = jj_gen;

      }
    } catch (ParseException e) {
                nCountSintaticError += 1;
                mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void comentario() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMENT:
        jj_consume_token(COMENT);
        jj_consume_token(CONSTANTE_LIT);
        break;
      default:
        jj_la1[15] = jj_gen;

      }
    } catch (ParseException e) {
                     nCountSintaticError += 1;
                     mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void selecao() throws ParseException {
    try {
      jj_consume_token(VERIFY);
      expressao();
      isTrueFalse();
      jj_consume_token(PONTO);
    } catch (ParseException e) {
                         nCountSintaticError += 1;
                         mensagens_erros_sintatic.append(e.getMessage());
    }
  }

  static final public void isTrueFalse() throws ParseException {
    jj_consume_token(IS);
    trueFalse();
  }

  static final public void trueFalse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      jj_consume_token(ACHAVE);
      lista_de_comandos();
      jj_consume_token(FCHAVE);
      isFalse();
      break;
    case FALSE:
      jj_consume_token(FALSE);
      jj_consume_token(ACHAVE);
      lista_de_comandos();
      jj_consume_token(FCHAVE);
      isTrue();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void isTrue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      jj_consume_token(TRUE);
      jj_consume_token(ACHAVE);
      lista_de_comandos();
      jj_consume_token(FCHAVE);
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static final public void isFalse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      jj_consume_token(FALSE);
      jj_consume_token(ACHAVE);
      lista_de_comandos();
      jj_consume_token(FCHAVE);
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  static final public void atribuicao() throws ParseException {
    jj_consume_token(SET);
    expressao();
    jj_consume_token(TO);
    lista_identificadores();
    jj_consume_token(PONTO);
  }

  static final public void repeticao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOOP:
      jj_consume_token(LOOP);
      lista_de_comandos();
      jj_consume_token(WHILE);
      expressao();
      isTrue();
      jj_consume_token(PONTO);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      expressao();
      isTrue();
      jj_consume_token(DO);
      lista_de_comandos();
      jj_consume_token(PONTO);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expressao() throws ParseException {
    expressaoaritmeticaoulogica();
    expressao2();
  }

  static final public void expressao2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUIVALENTE:
      jj_consume_token(EQUIVALENTE);
      expressaoaritmeticaoulogica();
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      expressaoaritmeticaoulogica();
      break;
    case MENOR:
      jj_consume_token(MENOR);
      expressaoaritmeticaoulogica();
      break;
    case MAIOR:
      jj_consume_token(MAIOR);
      expressaoaritmeticaoulogica();
      break;
    case MENOROUIGUAL:
      jj_consume_token(MENOROUIGUAL);
      expressaoaritmeticaoulogica();
      break;
    case MAIOROUIGUAL:
      jj_consume_token(MAIOROUIGUAL);
      expressaoaritmeticaoulogica();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expressaoaritmeticaoulogica() throws ParseException {
    termo2();
    menorprioridade();
  }

  static final public void menorprioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADICAO:
      jj_consume_token(ADICAO);
      termo2();
      menorprioridade();
      break;
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      termo2();
      menorprioridade();
      break;
    case OU:
      jj_consume_token(OU);
      termo2();
      menorprioridade();
      break;
    default:
      jj_la1[21] = jj_gen;

    }
  }

  static final public void termo2() throws ParseException {
    termo1();
    mediaprioridade();
  }

  static final public void mediaprioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLICACAO:
      jj_consume_token(MULTIPLICACAO);
      termo1();
      mediaprioridade();
      break;
    case DIVISAO:
      jj_consume_token(DIVISAO);
      termo1();
      mediaprioridade();
      break;
    case DIVISAOINTEIRA:
      jj_consume_token(DIVISAOINTEIRA);
      termo1();
      mediaprioridade();
      break;
    case RESTODIVISAO:
      jj_consume_token(RESTODIVISAO);
      termo1();
      mediaprioridade();
      break;
    case E:
      jj_consume_token(E);
      termo1();
      mediaprioridade();
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  static final public void termo1() throws ParseException {
    elemento();
    maiorprioridade();
  }

  static final public void maiorprioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POTENCIA:
      jj_consume_token(POTENCIA);
      elemento();
      maiorprioridade();
      break;
    default:
      jj_la1[23] = jj_gen;

    }
  }

  static final public void elemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      indice();
      break;
    case CONSTANTE_NUM_INT:
      jj_consume_token(CONSTANTE_NUM_INT);
      break;
    case CONSTANTE_NUM_REAL:
      jj_consume_token(CONSTANTE_NUM_REAL);
      break;
    case CONSTANTE_LIT:
      jj_consume_token(CONSTANTE_LIT);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case APARENT:
      jj_consume_token(APARENT);
      expressao();
      jj_consume_token(FPARENT);
      break;
    case NAO:
      jj_consume_token(NAO);
      jj_consume_token(APARENT);
      expressao();
      jj_consume_token(FPARENT);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void indice() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACOLCH:
      jj_consume_token(ACOLCH);
      jj_consume_token(CONSTANTE_NUM_INT);
      jj_consume_token(FCOLCH);
      break;
    default:
      jj_la1[25] = jj_gen;

    }
  }

  static final public void Programa() throws ParseException {
    program();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalisadorLexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0xc0,0xf000000,0xe000000,0x0,0xe180000,0x40,0x80,0x1e00,0x0,0x0,0x2000,0x87c000,0x87c000,0x1000000,0x0,0x180000,0x100,0x100,0x60000,0x0,0x0,0x0,0x0,0x4f180000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x14,0x10,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x1f8000,0x400180,0x803600,0x800,0x200000,0x4,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AnalisadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalisadorLexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalisadorLexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalisadorLexico(AnalisadorLexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if(token_source.foundLexError() > 0) throw generateParseException();
      if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
