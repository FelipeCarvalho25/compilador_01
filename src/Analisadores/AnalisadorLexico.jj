PARSER_BEGIN(AnalisadorLexico)
package Analisadores;
public class AnalisadorLexico {

    public String getMessages() {
        return this.token_source.getMensagesManhosas();
     }

}
PARSER_END(AnalisadorLexico)

TOKEN_MGR_DECLS:
{
    private static int countLexError =0;
    private static StringBuffer mensages_manhosas = new StringBuffer();
    private static StringBuffer mensagens_erros = new StringBuffer();

    public int foundLexError()
    {
        return countLexError;
    }
    public String getMensagesManhosas(){
          return mensages_manhosas.toString();
     }
     public String getMensagensErros(){
               return mensagens_erros.toString();
          }
}


SPECIAL_TOKEN : {
    <INVALID_LEXICAL:(~["'"," ","\\","\n","\r", "a"-"z", "A"-"Z", "0"-"9", "\"","(",")","[","]","{","}",":", ";", ",",".", "=",">","<","!","+","-","*","/","%","\t"
    ,"\f", "&", "|"])+ > {mensagens_erros.append("ERRO(01): ENCONTRADO SIMBOLO INVALIDO -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); countLexError++; }
    | <INVALID_STRG1: "\"" (~["\n","\r", "\"" ])* ["\n","\r"] > {mensagens_erros.append("ERRO(02): STRING NAO FINALIZADA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); countLexError++; }
    | <INVALID_STRG2: "'\"'" (~["\n","\r", "'" ])* ["\n","\r"] > {mensagens_erros.append("ERRO(02): STRING NAO FINALIZADA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); countLexError++; }


} //TIPOS
TOKEN: // PALAVRAS RESERVADAS
{
	<PROGRAM: ("p" | "P")  ("r" | "R") ("o" | "O") ("g" | "G") ("r" | "R") ("a" | "A") ("m" | "M") > { mensages_manhosas.append("PALAVRAS RESERVADAS ->" +   image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <DEFINE: ("d" | "D") ("e" | "E") ("f" | "F") ("i" | "I") ("n" | "N") ("e" | "E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n");}
 | <NOT: ("n" | "N")("o" | "O")("t" | "T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <VARIABLE: ("v"|"V")("a"|"A")("r"|"R")("i"|"I")("a"|"A")("b"|"B")("l"|"L")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <IS: ("i"|"I")("s"|"S")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <BOOLEAN: ("b"|"B")("o"|"O")("o"|"O")("l"|"L")("e"|"E")("a"|"A")("n"|"N")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <CHAR: ("c"|"C")("h"|"H")("a"|"A")("r"|"R")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <REAL: ("r"|"R")("e"|"E")("a"|"A")("l"|"L")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <NATURAL: ("a"|"A")("t"|"T")("u"|"U")("r"|"R")("a"|"A")("l"|"L")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <EXECUTE: ("e"|"E")("x"|"X")("e"|"E")("c"|"C")("u"|"U")("t"|"T")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <SET: ("s"|"S")("e"|"E")("t"|"T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <GET: ("g"|"G")("e"|"E")("t"|"T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <PUT: ("p"|"P")("u"|"U")("t"|"T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <LOOP: ("l"|"L")("o"|"O")("o"|"O")("p"|"P")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <WHILE: ("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <TRUE: ("t"|"T")("r"|"R")("u"|"U")("e"|"E")>{ mensages_manhosas.append("PALAVRA RESERVADA TIPO BOOLEANO->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <FALSE: ("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO BOOLEANO->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <DO: ("d"|"D")("o"|"O")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <TO: ("t"|"T")("o"|"O")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <VERIFY: ("v"|"V")("e"|"E")("r"|"R")("i"|"I")("f"|"F")("y"|"Y")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }

}
/*TOKEN: //Comentarios
{
	<COMENTARIO_LINHA: "//"(<CHARESP>)*> { mensages_manhosas.append("COMENTARIO DE LINHA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<COMENTARIO_BLOCO: "/*" (<CHARESP>)* ""> { mensages_manhosas.append("COMENTARIO DE BLOCO -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	//|<#CHARESP: ( (~["'"," ","\\","\n","\r"]) | <LETRA> | ("\\" ( ["n","t","b","r","f","\\","'","\""]| ["u","U"]["+"]["0"-"9","a"-"z","A"-"Z"]["0"-"9","a"-"z","A"-"Z"]["0"-"9","a"-"z","A"-"Z"]["0"-"9","a"-"z","A"-"Z"] ) ) )>
   // |<#LETRA: (["a"-"z","A"-"Z"])>
}*/

TOKEN: //IDENTIFICADOR
{

	<IDENTIFICADOR: (<LETTER> | "_" ) ((<LETTER>)* | ((<LETTER>)  ("_")  (["0" - "9"]))* (<LETTER> | "_" ) | ((["0" - "9"]) "_" (<LETTER>))* | ((<LETTER>) (["0" - "9"])  "_" )* | ((<LETTER>) "_")* | (["0"-"9"])(<LETTER>)* "_" | (["0"-"9"])(<LETTER>)+ )* > { mensages_manhosas.append("IDENTIFICADOR -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<CONSTANTE_NUM_REAL: ((["0" - "9"])((["0" - "9"])?(["0" - "9"])?(["0" - "9"])?(["0" - "9"])?)?("." (["0" - "9"])((["0" - "9"]))?)) > { mensages_manhosas.append("CONSTANTE_NUM REAL-> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<CONSTANTE_NUM_INT: ((["0" - "9"])((["0" - "9"])?(["0" - "9"])?)?) > { mensages_manhosas.append("CONSTANTE_NUM INTEIRA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<CONSTANTE_LIT: (("\"") (<ASCII>)* ("\"") | ("'")(<ASCII>)* ("'")) > { mensages_manhosas.append("CONSTANTE_LIT -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<#ASCII: ( (~["'"," ","\\","\n","\r"]) | <LETTER>  | ("\\" ( ["n","t","b","r","f","\\","'","\""]| ["u","U"]["+"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"] ) ) )>
    |<#LETTER: (["a"-"z","A"-"Z"])>


}

TOKEN: // CARACTERES ESPECIAIS
{
	<APARENT: "(" > {  mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<FPARENT: ")"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<ACHAVE: "{"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<FCHAVE: "}"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<ACOLCH: "["> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<FCOLCH: "]"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<VIRGULA: ","> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<PONTO: "."> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<COMENT: ":-" > { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }


}

TOKEN: //OPERADORES ARTMETICOS
{
	<ADICAO: "+"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<SUBTRACAO: "-"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MULTIPLICACAO: "*"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<DIVISAO: "/"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<POTENCIA: "**"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<DIVISAOINTEIRA: "%"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<RESTODIVISAO: "%%"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<IGUAL: "="> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
}
TOKEN: //OPERADORES RELACIONAIS
{
	<EQUIVALENTE: "=="> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<DIFERENTE: "!="> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MENOR: "<"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MENOROUIGUAL: "<="> { mensages_manhosas.append("SÍMBOLO ESPECIAL  -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MAIOR: ">"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MAIOROUIGUAL: ">="> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }

}
TOKEN: //OPERADORES LOGICOS
{
	<NAO: "!"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<OU: "|"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<E: "&"> { mensages_manhosas.append("SÍMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }

}



SKIP: // IGNORAR
{
	//<COMENTARIO: ":-"> { mensages_manhosas.append("COMENTARIO -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	 "\r"
	| "\t"
	| "\n"
	| "\f"
	|"\r\n"
	|" "
	|"/*": multiLineComent
	| "//" : singleLineComent
}
<singleLineComent> SKIP : {
    <["\n","\r"]>: DEFAULT
    | <~[]>
}
<multiLineComent>SKIP : {
    "*/":DEFAULT
    | <~[]>
}

void program ():
{
}
{
    comentario() <PROGRAM>  <ACHAVE> declaracao_variaveis() corpo_do_programa() <FCHAVE> identificador_programa() <EOF>
}
void declaracao_variaveis():{
}{
    define() | {}
}
void define():{
}
{
    <DEFINE> <ACHAVE> estrutura_define() <FCHAVE>
}

void estrutura_define():
{
}
{
    constante() variavel_recursiva() | variavel() constante_recursiva()
}
void get():
{
}
{
    <GET> <ACHAVE> lista_identificadores() <FCHAVE> <PONTO>
}
void put():
{
}
{
    <PUT> <ACHAVE> lista_de_identificadore_constantes() <FCHAVE> <PONTO>
}
void lista_de_identificadore_constantes():
{
}
{
    <IDENTIFICADOR> lista_de_identificadore_constantes_recursivo() | tipo_constante() lista_de_identificadore_constantes_recursivo()
}
void tipo_constante():
{
}
{
    <CONSTANTE_NUM_REAL> | <CONSTANTE_LIT> |<CONSTANTE_NUM_INT>
}
void lista_de_identificadore_constantes_recursivo():
{
}
{
    <VIRGULA> lista_de_identificadore_constantes() | {}
}
void variavel():{
}
{
    <VARIABLE> tipo() <IS> lista_identificadores_variavel() valor() <PONTO>  variavel_recursiva()
}
void constante():{
}
{
    <NOT> <VARIABLE> tipo() <IS> lista_identificadores() valor() <PONTO>  constante_recursiva()
}
void valor():{
}
{
    <CONSTANTE_NUM_INT> | <CONSTANTE_NUM_REAL> | <CONSTANTE_LIT> | <TRUE> | <FALSE>
}
void constante_recursiva():
{
}
{
    constante() | {}
}
void variavel_recursiva():
{
}
{
    variavel() | {}
}

void tipo():
{
}
{
    <NATURAL> |<REAL> | <CHAR> | <BOOLEAN>
}
void lista_identificadores_variavel():
{
}
{
     <IDENTIFICADOR> lista_identificadores_variavel_recursivo()
}

void lista_identificadores_variavel_recursivo():
{
}{
    <VIRGULA> lista_identificadores_variavel() | <ACOLCH> <CONSTANTE_NUM_INT> <FCOLCH> | {}
}
void lista_identificadores():
{
}
{
     <IDENTIFICADOR> lista_identificadores_recursivo()
}

void lista_identificadores_recursivo():
{
}{
    <VIRGULA> lista_identificadores() | {}
}
void corpo_do_programa():{
}
{
    <EXECUTE> <ACHAVE> lista_de_comandos() <FCHAVE> | {}
}

void lista_de_comandos():{
}
{
    comando() comando_recursivo()
}
void comando():{
}
{
    get() | put() | selecao() | atribuicao() | repeticao()
}
void comando_recursivo():{
}
{
    lista_de_comandos() | {}
}
void identificador_programa():{
}
{
    <IDENTIFICADOR> | {}
}

void comentario():{
}{
    <COMENT> <CONSTANTE_LIT> | {}
}

void selecao():
{}
{
    <VERIFY> expressao()   isTrueFalse() <PONTO>
}

void isTrueFalse():
{}
{
    <IS> trueFalse()
}
void trueFalse():
{}
{
    <TRUE><ACHAVE> lista_de_comandos() <FCHAVE> isFalse() | <FALSE> <ACHAVE> lista_de_comandos() <FCHAVE> isTrue()
}

void isTrue():
{}
{
    <IS> <TRUE> <ACHAVE> lista_de_comandos() <FCHAVE> | {}
}
void isFalse():
{}
{
    <IS> <FALSE> <ACHAVE> lista_de_comandos() <FCHAVE> | {}
}

void atribuicao():
{}
{
	<SET> expressao() <TO> lista_identificadores() <PONTO>
}

void repeticao():
{}
{
	<LOOP> lista_de_comandos() <WHILE> expressao() isTrue() <PONTO>
	| <WHILE> expressao() isTrue() <DO> lista_de_comandos() <PONTO>
}


void expressao():
{}
{
	expressaoaritmeticaoulogica() expressao2() 
}

void expressao2():
{}
{
	<EQUIVALENTE> expressaoaritmeticaoulogica() 
	| <DIFERENTE> expressaoaritmeticaoulogica()
	| <MENOR> expressaoaritmeticaoulogica()
	| <MAIOR> expressaoaritmeticaoulogica()
	| <MENOROUIGUAL> expressaoaritmeticaoulogica()
	| <MAIOROUIGUAL> expressaoaritmeticaoulogica()
}

void expressaoaritmeticaoulogica():
{}
{
	termo2() menorprioridade()
}

void menorprioridade():
{}
{
	<ADICAO> termo2() menorprioridade()
	| <SUBTRACAO> termo2() menorprioridade()
	| <OU> termo2() menorprioridade()
	|  {}

}

void termo2():
{}
{
	termo1() mediaprioridade()
}

void mediaprioridade():
{}
{
	<MULTIPLICACAO> termo1() mediaprioridade()
	| <DIVISAO> termo1() mediaprioridade()
	| <DIVISAOINTEIRA> termo1() mediaprioridade()
	| <RESTODIVISAO> termo1() mediaprioridade()
	| <E> termo1() mediaprioridade()
	|  {}
}

void termo1():
{}
{
	elemento() maiorprioridade()
}

void maiorprioridade():
{}
{
	<POTENCIA> elemento() maiorprioridade()
	|  {}
}

void elemento():
{}
{
	<IDENTIFICADOR> indice()
	| <CONSTANTE_NUM_INT>
	| <CONSTANTE_NUM_REAL>
	| <CONSTANTE_LIT>
	| <TRUE>
	| <FALSE>
	| <APARENT> expressao() <FPARENT>
	| <NAO> <APARENT> expressao() <FPARENT>
}

void indice():
{}
{
	<ACOLCH> <CONSTANTE_NUM_INT> <FCOLCH>
	|  {}
}

void Programa():
{ }
{
	  program()
	  /*((
	    <PROGRAM>|<DEFINE>|<NOT>|<VARIABLE>|<IS>|<BOOLEAN>|<CHAR>|<REAL>|<NATURAL>|<EXECUTE>|<VERIFY>|<SET>|<GET>|<PUT>|<LOOP>|<WHILE>|<TRUE>|<FALSE>|<DO>|<TO>|
	<APARENT>|<FPARENT>|<ACHAVE>|<FCHAVE>|<ACOLCH>|<FCOLCH>|<VIRGULA>|<PONTO>|<ADICAO>|<SUBTRACAO>|<MULTIPLICACAO>|<DIVISAO>|
	<POTENCIA>|<DIVISAOINTEIRA>|<RESTODIVISAO>|<IGUAL>|<EQUIVALENTE>| <DIFERENTE>|<MENOR>|<MENOROUIGUAL>|<MAIOR>|<MAIOROUIGUAL>|
	<NAO>|<OU>|<E>|<IDENTIFICADOR>|<CONSTANTE_NUM_REAL>|<CONSTANTE_NUM_INT>|<CONSTANTE_LIT>|<COMENTARIO_BLOCO> |<COMENTARIO_LINHA>
	)*)
*/
}
