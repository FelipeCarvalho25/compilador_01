PARSER_BEGIN(AnalisadorLexico)
package Analisadores;
import EstruturasDados.First;import EstruturasDados.RecoverySet;public class AnalisadorLexico {
    static int nCountSintaticError = 0;
    private static boolean eof = false;
    private static StringBuffer mensagens_erros_sintatic = new StringBuffer();
    public String getMessages() {
        return this.token_source.getMensagesManhosas();
     }

    public int getLexError() {
       return this.token_source.foundLexError();
    }
    public int getSintaticError() {
           return this.nCountSintaticError;
    }
    public static void acaoSemantica(String codigo){

    }
    public String getMensagensErros() {
       return this.token_source.getMensagensErros();
    }
   public String getMsgSintaticError() {
          return this.mensagens_erros_sintatic.toString();
       }

   public static void consumeUntil(RecoverySet g, ParseException e, String met)throws ParseException{
        Token tok;
        if(g == null) throw e;
        tok = getToken(1);
        while(!eof){
            if(g.contains(tok.kind)){
                break;
            }
            getNextToken();
            tok = getToken(1);
            if(tok.kind == EOF && !g.contains(EOF)) eof = true;
        }
        nCountSintaticError += 1;
        mensagens_erros_sintatic.append(e.getMessage());
        if(eof) throw  new ParseException("EOF encontrado prematuramente!");
   }
   public static String im(int x){
        int k;
        String s;

        s = tokenImage[x];
        k = s.lastIndexOf("\"");
        try{s = s.substring(1,k);}
        catch (StringIndexOutOfBoundsException e){ }
        return s;
   }
}


PARSER_END(AnalisadorLexico)

TOKEN_MGR_DECLS:
{
    private static int countLexError =0;
    private static StringBuffer mensages_manhosas = new StringBuffer();
    private static StringBuffer mensagens_erros = new StringBuffer();

    public int foundLexError()
    {
        return countLexError;
    }
    public String getMensagesManhosas(){
          return mensages_manhosas.toString();
     }
     public String getMensagensErros(){
               return mensagens_erros.toString();
          }
}


SPECIAL_TOKEN : {
    <INVALID_LEXICAL:(~["'"," ","\\","\n","\r", "a"-"z", "A"-"Z", "0"-"9", "\"","(",")","[","]","{","}",":", ";", ",",".", "=",">","<","!","+","-","*","/","%","\t"
    ,"\f", "&", "|"])+ > {mensagens_erros.append("ERRO(01): ENCONTRADO SIMBOLO INVALIDO -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); countLexError++; }
    | <INVALID_STRG1: "\"" (~["\n","\r", "\"" ])* ["\n","\r"] > {mensagens_erros.append("ERRO(02): STRING NAO FINALIZADA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); countLexError++; }
    | <INVALID_STRG2: "'" (~["\n","\r", "'" ])* ["\n","\r"] > {mensagens_erros.append("ERRO(02): STRING NAO FINALIZADA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); countLexError++; }
    | <INVALID_IDENT: "_""_"(["a"-"z","A"-"Z"] | ["0" - "9"])* | (["a"-"z","A"-"Z"] | ["0" - "9"])* "_""_" | (["a"-"z","A"-"Z"] | ["0" - "9"])*"_""_"(["a"-"z","A"-"Z"] | ["0" - "9"])*   > {mensagens_erros.append("ERRO(03): IDENTIFICADOR INVÁLIDO -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); countLexError++; }



} //TIPOS
TOKEN: // PALAVRAS RESERVADAS
{
	<PROGRAM: ("p" | "P")  ("r" | "R") ("o" | "O") ("g" | "G") ("r" | "R") ("a" | "A") ("m" | "M") > { mensages_manhosas.append("PALAVRAS RESERVADAS ->" +   image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <DEFINE: ("d" | "D") ("e" | "E") ("f" | "F") ("i" | "I") ("n" | "N") ("e" | "E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n");}
 | <NOT: ("n" | "N")("o" | "O")("t" | "T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <VARIABLE: ("v"|"V")("a"|"A")("r"|"R")("i"|"I")("a"|"A")("b"|"B")("l"|"L")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <IS: ("i"|"I")("s"|"S")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <BOOLEAN: ("b"|"B")("o"|"O")("o"|"O")("l"|"L")("e"|"E")("a"|"A")("n"|"N")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <CHAR: ("c"|"C")("h"|"H")("a"|"A")("r"|"R")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <REAL: ("r"|"R")("e"|"E")("a"|"A")("l"|"L")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <NATURAL: ("n"|"N")("a"|"A")("t"|"T")("u"|"U")("r"|"R")("a"|"A")("l"|"L")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <EXECUTE: ("e"|"E")("x"|"X")("e"|"E")("c"|"C")("u"|"U")("t"|"T")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <SET: ("s"|"S")("e"|"E")("t"|"T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <GET: ("g"|"G")("e"|"E")("t"|"T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <PUT: ("p"|"P")("u"|"U")("t"|"T")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <LOOP: ("l"|"L")("o"|"O")("o"|"O")("p"|"P")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <WHILE: ("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <TRUE: ("t"|"T")("r"|"R")("u"|"U")("e"|"E")>{ mensages_manhosas.append("PALAVRA RESERVADA TIPO BOOLEANO->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <FALSE: ("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>{ mensages_manhosas.append("PALAVRAS RESERVADAS TIPO BOOLEANO->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <DO: ("d"|"D")("o"|"O")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <TO: ("t"|"T")("o"|"O")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
 | <VERIFY: ("v"|"V")("e"|"E")("r"|"R")("i"|"I")("f"|"F")("y"|"Y")>{ mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }

}
/*TOKEN: //Comentarios
{
	<COMENTARIO_LINHA: "//"(<CHARESP>)*> { mensages_manhosas.append("COMENTARIO DE LINHA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<COMENTARIO_BLOCO: "/*" (<CHARESP>)* ""> { mensages_manhosas.append("COMENTARIO DE BLOCO -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	//|<#CHARESP: ( (~["'"," ","\\","\n","\r"]) | <LETRA> | ("\\" ( ["n","t","b","r","f","\\","'","\""]| ["u","U"]["+"]["0"-"9","a"-"z","A"-"Z"]["0"-"9","a"-"z","A"-"Z"]["0"-"9","a"-"z","A"-"Z"]["0"-"9","a"-"z","A"-"Z"] ) ) )>
   // |<#LETRA: (["a"-"z","A"-"Z"])>
}*/

TOKEN: //IDENTIFICADOR
{

	<IDENTIFICADOR: (<LETTER> | "_" ) ((<LETTER>)* | ((<LETTER>)  ("_")  (["0" - "9"]))* (<LETTER> | "_" ) | ((["0" - "9"]) "_" (<LETTER>))* | ((<LETTER>) (["0" - "9"])  "_" )* | ((<LETTER>) "_")* | (["0"-"9"])(<LETTER>)* "_" | (["0"-"9"])(<LETTER>)+ )* > { mensages_manhosas.append("IDENTIFICADOR -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<CONSTANTE_NUM_REAL: ((["0" - "9"])((["0" - "9"])?(["0" - "9"])?(["0" - "9"])?(["0" - "9"])?)?("." (["0" - "9"])((["0" - "9"]))?)) > { mensages_manhosas.append("CONSTANTE_NUM REAL-> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<CONSTANTE_NUM_INT: ((["0" - "9"])((["0" - "9"])?(["0" - "9"])?)?) > { mensages_manhosas.append("CONSTANTE_NUM INTEIRA -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<CONSTANTE_LIT: (("\"") (<ASCII>)* ("\"") | ("'")(<ASCII>)* ("'")) > { mensages_manhosas.append("CONSTANTE_LIT -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<#ASCII: ( (~["'","\\","\n","\r"]) | <LETTER>  | ("\\" ( ["n","t","b","r","f","\\","'","\"", " "]| ["u","U"]["+"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"] ) ) )>
    |<#LETTER: (["a"-"z","A"-"Z"])>


}

TOKEN: // CARACTERES ESPECIAIS
{
	<APARENT: "(" > {  mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<FPARENT: ")"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<ACHAVE: "{"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<FCHAVE: "}"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<ACOLCH: "["> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<FCOLCH: "]"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<VIRGULA: ","> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<PONTO: "."> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<COMENT: ":-" > { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }


}

TOKEN: //OPERADORES ARTMETICOS
{
	<ADICAO: "+"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<SUBTRACAO: "-"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MULTIPLICACAO: "*"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<DIVISAO: "/"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<POTENCIA: "**"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<DIVISAOINTEIRA: "%"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<RESTODIVISAO: "%%"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<IGUAL: "="> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
}
TOKEN: //OPERADORES RELACIONAIS
{
	<EQUIVALENTE: "=="> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<DIFERENTE: "!="> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MENOR: "<"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MENOROUIGUAL: "<="> { mensages_manhosas.append("SIMBOLO ESPECIAL  -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MAIOR: ">"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<MAIOROUIGUAL: ">="> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }

}
TOKEN: //OPERADORES LOGICOS
{
	<NAO: "!"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<OU: "|"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }
	|<E: "&"> { mensages_manhosas.append("SIMBOLO ESPECIAL -> "+image + "; linha: " +input_stream.getEndLine() + "coluna:" +  input_stream.getBeginColumn() +"\r\n"); }

}



SKIP: // IGNORAR
{

	 "\r"
	| "\t"
	| "\n"
	| "\f"
	|"\r\n"
	|" "
	|"/*": multiLineComent
	| "//" : singleLineComent
}
<singleLineComent> SKIP : {
    <["\n","\r"]>: DEFAULT
    | <~[]>
}
<multiLineComent>SKIP : {
    "*/":DEFAULT
    | <~[]>
}

void program ():
{
    RecoverySet g = First.program;
}
{
    try{
        comentario()
        <PROGRAM>
        <ACHAVE>
        declaracao_variaveis()
        corpo_do_programa()
         <FCHAVE>
        identificador_programa()
        {acaoSemantica("#1");}
        <EOF>
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "program");
        }
    }
}
void declaracao_variaveis():
{}
{
    define()
        |
    {}

}
void define():
{
    RecoverySet g = First.define;
}
{
    try{
        <DEFINE>
        <ACHAVE>
        estrutura_define()
        <FCHAVE>
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
           consumeUntil(g, e, "program");
        }
    }
}

void estrutura_define():
{}
{
    constante() chama_variavel() | variavel() chama_constante()
}
void chama_variavel():
{}
{
    variavel()
        |
    {}
}
void chama_constante():
{}
{
    constante()
        |
    {}
}
void variavel():
{
    RecoverySet g = First.variable;
}
{
    try{
        <VARIABLE>
        {acaoSemantica("#6");}
        variaveis()
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
             consumeUntil(g, e, "program");
        }
    }

}
void constante():
{
    RecoverySet g = First.constante;
}
{
    try{
        <NOT>
        <VARIABLE>
        {acaoSemantica("#3");}
        constantes()
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
              consumeUntil(g, e, "constante");
        }
    }
}
void constantes():
{
    RecoverySet g = First.tipo;
 }
{
    try{
        tipo()
        <IS>
        lista_identificadores_de_constantes()
        {acaoSemantica("#4");}
        valor()
        {acaoSemantica("#5");}
        <PONTO>
        constante_recursiva()
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
             consumeUntil(g, e, "constante");
        }
    }
}
void valor():
{
    RecoverySet g = First.valor;
}
{
    try{
        <CONSTANTE_NUM_INT>
        |
        <CONSTANTE_NUM_REAL>
        |
        <CONSTANTE_LIT>
        |
        <TRUE>
        |
        <FALSE>
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
              consumeUntil(g, e, "valor");
        }
    }
}
void constante_recursiva():
{
}
{
     constantes()
     |
     {}
}
void variaveis():
{
    RecoverySet g = First.tipo;
 }
{
    try{
        tipo()
        <IS>
        lista_identificadores_variavel()
        {acaoSemantica("#4");}
        <PONTO>
        variavel_recursiva()
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}
void variavel_recursiva():
{
}
{
     variaveis()
     |
     {}
}

void tipo():
{
    RecoverySet g = First.tipo;
}
{
    try{
        <NATURAL>
        {acaoSemantica("#7");}
        |
        <REAL>
        {acaoSemantica("#8");}
        |
        <CHAR>
        {acaoSemantica("#9");}
        |
        <BOOLEAN>
         {acaoSemantica("#10");}
    }catch(ParseException e){
         if(token_source.foundLexError() == 0) {
               consumeUntil(g, e, "valor");
         }
    }
}
void get():
{
    RecoverySet g = First.get;
}
{
    try{
        <GET>
        {acaoSemantica("#17");}
        <ACHAVE>
        lista_identificadores_variavel()
        <FCHAVE>
        <PONTO>
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
           consumeUntil(g, e, "valor");
        }
    }
}
void put():
{
    RecoverySet g = First.put;
}
{
    try{
        <PUT>
        <ACHAVE>
        lista_de_identificadore_constantes()
        <FCHAVE>
        <PONTO>
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}
void lista_de_identificadore_constantes():
{
}
{
    tipo_constante() lista_de_identificadore_constantes_recursivo()

}
void tipo_constante():
{
    RecoverySet g = First.tipo_const;
}
{
    try{
        <IDENTIFICADOR>
        {acaoSemantica("#18");}
        indice()
        {acaoSemantica("#20");}
        |
        <CONSTANTE_NUM_REAL>
        {acaoSemantica("#22");}
        |
        <CONSTANTE_LIT>
        {acaoSemantica("#23");}
        |
        <CONSTANTE_NUM_INT>
        {acaoSemantica("#21");}
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
              consumeUntil(g, e, "valor");
        }
    }
}
void lista_de_identificadore_constantes_recursivo():
{
    RecoverySet g = First.list_ident_const_rec;
}
{
    try{
        <VIRGULA>
        lista_de_identificadore_constantes()
        |
        {}
    }catch(ParseException e){
          if(token_source.foundLexError() == 0) {
                 consumeUntil(g, e, "valor");
          }
    }
}

void lista_identificadores_variavel():
{
    RecoverySet g = First.list_ident_const_rec;
}
{
    try{
        <IDENTIFICADOR>
        {acaoSemantica("#12");}
        indice()
        {acaoSemantica("#20");}
        { acaoSemantica("#13");}
        lista_identificadores_variavel_recursivo()
    }catch(ParseException e){
          if(token_source.foundLexError() == 0) {
               consumeUntil(g, e, "valor");
          }
    }finally{
           acaoSemantica("#2");
    }

}

void lista_identificadores_variavel_recursivo():
{
    RecoverySet g = First.list_ident_const_rec;
 }
{
    try{
        <VIRGULA>
        lista_identificadores_variavel()
        |
        {}
    }catch(ParseException e){
          if(token_source.foundLexError() == 0) {
                consumeUntil(g, e, "valor");
          }
    }
}

void lista_identificadores_de_constantes():
{
    RecoverySet g = First.list_ident_const_rec;
}
{
    try{
        <IDENTIFICADOR>
        {acaoSemantica("#11");}
        lista_identificadores_recursivo()
    }catch(ParseException e){
         if(token_source.foundLexError() == 0) {
              consumeUntil(g, e, "valor");
         }
    }
}

void lista_identificadores_recursivo():
{
    RecoverySet g = First.list_ident_const_rec;
 }
{
    try{
        <VIRGULA>
        lista_identificadores_de_constantes()
        |
        {}
    }catch(ParseException e){
          if(token_source.foundLexError() == 0) {
               consumeUntil(g, e, "valor");
          }
    }
}
void corpo_do_programa():
{
    RecoverySet g = First.corp_prog;
 }
{
    try{
        <EXECUTE>
        <ACHAVE>
        lista_de_comandos()
        <FCHAVE>
        |
        {}
    }catch(ParseException e){
        if(token_source.foundLexError() == 0) {
                consumeUntil(g, e, "valor");
        }
    }
}

void lista_de_comandos():{
}
{
    comando() comando_recursivo()
}
void comando():{
}
{
    get() | put() | selecao() | atribuicao() | repeticao()
}
void comando_recursivo():{
}
{
    lista_de_comandos()
     |
    {}
}
void identificador_programa():
{
    RecoverySet g = First.list_ident_const_rec;
}
{

        try{
            <IDENTIFICADOR>
        } catch(ParseException e){
            if(token_source.foundLexError() == 0) {
                consumeUntil(g, e, "valor");
            }
        }finally{
                acaoSemantica("#2");
        }
        |
        {}

}

void comentario():
{
    RecoverySet g = First.coment_prog;
}
{
        try{
             <COMENT>
             <CONSTANTE_LIT>
        } catch(ParseException e){
              if(token_source.foundLexError() == 0) {
                   consumeUntil(g, e, "valor");
              }
        }
        |
        {}

}

void selecao():
{
    RecoverySet g = First.verify;
 }
{
    try{
        <VERIFY>
        expressao()  isTrueFalse()
        {acaoSemantica("#24");}
        <PONTO>
    } catch(ParseException e){
         if(token_source.foundLexError() == 0) {
              consumeUntil(g, e, "valor");
         }
    }
}

void isTrueFalse():
{
    RecoverySet g = First.is;
 }
{
    try{
        <IS>
        trueFalse()
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
   }
}
void  trueFalse():
{
    RecoverySet g = First.truefalse;
 }
{
    try{
        <TRUE>
        {acaoSemantica("#25");}
        <ACHAVE>
        lista_de_comandos()
        <FCHAVE>
        isFalse()
        |
        <FALSE>
        {acaoSemantica("#26");}
        <ACHAVE>
        lista_de_comandos()
        <FCHAVE>
        isTrue()
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
             consumeUntil(g, e, "valor");
        }
    }
}

void isTrue():
{
    RecoverySet g = First.is;
 }
{
    try{
        <IS>
        <TRUE>
        {acaoSemantica("#27");}
        <ACHAVE>
        lista_de_comandos()
        <FCHAVE>
        |
        {}
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}
void isFalse():
{
    RecoverySet g = First.is;
 }
{
    try{
        <IS>
        <FALSE>
        {acaoSemantica("#27");}
        <ACHAVE>
        lista_de_comandos()
        <FCHAVE>
        |
        {}
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}

void atribuicao():
{
    RecoverySet g = First.set;
 }
{
    try{
        <SET>
        {acaoSemantica("#15");}
        expressao()
        <TO>
        lista_identificadores_variavel()
        {acaoSemantica("#16");}
        <PONTO>
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}

void repeticao():
{
    RecoverySet g = First.repet;
 }
{
    try{
        <LOOP>
        {acaoSemantica("#28");}
        <ACHAVE>
        lista_de_comandos()
        <FCHAVE>
        <WHILE>
        expressao()
        {acaoSemantica("#29");}
        <IS>
        <TRUE>
        <PONTO>
        |
        <WHILE>
        {acaoSemantica("#30");}
        expressao()
        {acaoSemantica("#31");}
        <IS>
        <TRUE>
        <DO>
        <ACHAVE>
        lista_de_comandos()
        <FCHAVE>
        {acaoSemantica("#32");}
        <PONTO>
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
                consumeUntil(g, e, "valor");
        }
    }
}


void expressao():
{

 }
{
	  expressaoaritmeticaoulogica() expressao2()
}

void expressao2():
{
    RecoverySet g = First.exp_logic;
}
{
    try{
	    <EQUIVALENTE>
        expressaoaritmeticaoulogica()
        {acaoSemantica("#33");}
	    |
	     <DIFERENTE>
	    expressaoaritmeticaoulogica()
	     {acaoSemantica("#34");}
	    |
	    <MENOR>
	    expressaoaritmeticaoulogica()
	     {acaoSemantica("#35");}
	    |
	    <MAIOR>
	    expressaoaritmeticaoulogica()
	     {acaoSemantica("#36");}
	    |
	    <MENOROUIGUAL>
	    expressaoaritmeticaoulogica()
	     {acaoSemantica("#37");}
	    |
	    <MAIOROUIGUAL>
	    expressaoaritmeticaoulogica()
	     {acaoSemantica("#38");}
	    |
	    {}

	} catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}

void expressaoaritmeticaoulogica():
{}
{
	termo2() menorprioridade()
}

void menorprioridade():
{
    RecoverySet g = First.menor_prio;
 }
{
    try{
	    <ADICAO>
	    termo2() menorprioridade()
	     {acaoSemantica("#39");}
	    |
	   <SUBTRACAO>
	    termo2() menorprioridade()
	     {acaoSemantica("#40");}
	    |
	    <OU>
	    termo2() menorprioridade()
	    {acaoSemantica("#41");}
	    |
        {}

	} catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }

}

void termo2():
{}
{
    termo1() mediaprioridade()
}

void mediaprioridade():
{
    RecoverySet g = First.media_prio;
 }
{
    try{
        <MULTIPLICACAO>
    	termo1() mediaprioridade()
    	{acaoSemantica("#42");}
	    |
	    <DIVISAO>
	    termo1() mediaprioridade()
	    {acaoSemantica("#43");}
	    |
	    <DIVISAOINTEIRA>
	    termo1() mediaprioridade()
	    {acaoSemantica("#44");}
	    |
	    <RESTODIVISAO>
	    termo1() mediaprioridade()
	    {acaoSemantica("#45");}
	    |
	    <E>
	    termo1() mediaprioridade()
	    {acaoSemantica("#46");}
	    |
	    {}
	} catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}

void termo1():
{}
{
    elemento() maiorprioridade()
}

void maiorprioridade():
{
    RecoverySet g = First.maior_prio;
 }
{
    try{
        <POTENCIA>
    	elemento() maiorprioridade()
    	{acaoSemantica("#47");}
	    |
	    {}
	} catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}

void elemento():
{
    RecoverySet g = First.elemento;
 }
{
    try{
        <IDENTIFICADOR>
        {acaoSemantica("#19");}
	    indice()
	    {acaoSemantica("#20");}
	    |
	    <CONSTANTE_NUM_INT>
        {acaoSemantica("#21");}

	    |
	    <CONSTANTE_NUM_REAL>
	    {acaoSemantica("#22");}
	    |
	    <CONSTANTE_LIT>
	    {acaoSemantica("#23");}

	    |
	    <TRUE>
	    {acaoSemantica("#48");}

	    |
	    <FALSE>
	    {acaoSemantica("#49");}
	    |
	    <APARENT>
	    expressao()
	    <FPARENT>
	    |
	     <NAO>
         <APARENT>
	     expressao()
	     <FPARENT>
	     {acaoSemantica("#50");}
	} catch(ParseException e){
        if(token_source.foundLexError() == 0) {
            consumeUntil(g, e, "valor");
        }
    }
}

void indice():
{
    RecoverySet g = First.indice;
}
{
    try{
        <ACOLCH>
        <CONSTANTE_NUM_INT>
       {acaoSemantica("#14");}
        <FCOLCH>
	    |
	    {}
    } catch(ParseException e){
        if(token_source.foundLexError() == 0) {
             consumeUntil(g, e, "valor");
         }
    }
}

void Programa():
{ }
{
    program()
	  /*((
	    <PROGRAM>|<DEFINE>|<NOT>|<VARIABLE>|<IS>|<BOOLEAN>|<CHAR>|<REAL>|<NATURAL>|<EXECUTE>|<VERIFY>|<SET>|<GET>|<PUT>|<LOOP>|<WHILE>|<TRUE>|<FALSE>|<DO>|<TO>|
	<APARENT>|<FPARENT>|<ACHAVE>|<FCHAVE>|<ACOLCH>|<FCOLCH>|<VIRGULA>|<PONTO>|<ADICAO>|<SUBTRACAO>|<MULTIPLICACAO>|<DIVISAO>|
	<POTENCIA>|<DIVISAOINTEIRA>|<RESTODIVISAO>|<IGUAL>|<EQUIVALENTE>| <DIFERENTE>|<MENOR>|<MENOROUIGUAL>|<MAIOR>|<MAIOROUIGUAL>|
	<NAO>|<OU>|<E>|<IDENTIFICADOR>|<CONSTANTE_NUM_REAL>|<CONSTANTE_NUM_INT>|<CONSTANTE_LIT>|<COMENTARIO_BLOCO> |<COMENTARIO_LINHA>
	)*)
*/
}