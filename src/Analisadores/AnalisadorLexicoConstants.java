package Analisadores;/* Generated By:JavaCC: Do not edit this line. AnalisadorLexicoConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalisadorLexicoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAM = 1;
  /** RegularExpression Id. */
  int DEFINE = 2;
  /** RegularExpression Id. */
  int NOT = 3;
  /** RegularExpression Id. */
  int VARIABLE = 4;
  /** RegularExpression Id. */
  int IS = 5;
  /** RegularExpression Id. */
  int BOOLEAN = 6;
  /** RegularExpression Id. */
  int CHAR = 7;
  /** RegularExpression Id. */
  int REAL = 8;
  /** RegularExpression Id. */
  int NATURAL = 9;
  /** RegularExpression Id. */
  int EXECUTE = 10;
  /** RegularExpression Id. */
  int SET = 11;
  /** RegularExpression Id. */
  int GET = 12;
  /** RegularExpression Id. */
  int PUT = 13;
  /** RegularExpression Id. */
  int LOOP = 14;
  /** RegularExpression Id. */
  int WHILE = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int DO = 18;
  /** RegularExpression Id. */
  int TO = 19;
  /** RegularExpression Id. */
  int APARENT = 20;
  /** RegularExpression Id. */
  int FPARENT = 21;
  /** RegularExpression Id. */
  int ACHAVE = 22;
  /** RegularExpression Id. */
  int FCHAVE = 23;
  /** RegularExpression Id. */
  int ACOLCH = 24;
  /** RegularExpression Id. */
  int FCOLCH = 25;
  /** RegularExpression Id. */
  int VIRGULA = 26;
  /** RegularExpression Id. */
  int PONTO = 27;
  /** RegularExpression Id. */
  int ADICAO = 28;
  /** RegularExpression Id. */
  int SUBTRACAO = 29;
  /** RegularExpression Id. */
  int MULTIPLICACAO = 30;
  /** RegularExpression Id. */
  int DIVISAO = 31;
  /** RegularExpression Id. */
  int POTENCIA = 32;
  /** RegularExpression Id. */
  int DIVISAOINTEIRA = 33;
  /** RegularExpression Id. */
  int RESTODIVISAO = 34;
  /** RegularExpression Id. */
  int IGUAL = 35;
  /** RegularExpression Id. */
  int EQUIVALENTE = 36;
  /** RegularExpression Id. */
  int DIFERENTE = 37;
  /** RegularExpression Id. */
  int MENOR = 38;
  /** RegularExpression Id. */
  int MENOROUIGUAL = 39;
  /** RegularExpression Id. */
  int MAIOR = 40;
  /** RegularExpression Id. */
  int MAIOROUIGUAL = 41;
  /** RegularExpression Id. */
  int NAO = 42;
  /** RegularExpression Id. */
  int OU = 43;
  /** RegularExpression Id. */
  int E = 44;
  /** RegularExpression Id. */
  int NATURAIS = 45;
  /** RegularExpression Id. */
  int CHARS = 46;
  /** RegularExpression Id. */
  int BOOLEANS = 47;
  /** RegularExpression Id. */
  int COMENTARIO = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"program\"",
    "\"define\"",
    "\"not\"",
    "\"variable\"",
    "\"is\"",
    "\"boolean\"",
    "\"char\"",
    "\"real\"",
    "\"natural\"",
    "\"execute\"",
    "\"set\"",
    "\"get\"",
    "\"put\"",
    "\"loop\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "\"do\"",
    "\"to\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!\"",
    "\"|\"",
    "\"&\"",
    "<NATURAIS>",
    "<CHARS>",
    "<BOOLEANS>",
    "\" \"",
    "\":-\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"\\r\\n\"",
  };

}
