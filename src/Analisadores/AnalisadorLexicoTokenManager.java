/* Generated By:JavaCC: Do not edit this line. AnalisadorLexicoTokenManager.java */
//colocar pacote
package Analisadores;
/** Token Manager. */
public class AnalisadorLexicoTokenManager implements AnalisadorLexicoConstants
{
   //manter a variavel abaixo ela guarda as mensagens manhosas
   private static StringBuffer mensages_manhosas = new StringBuffer();
   /** Debug output. */
   public static  java.io.PrintStream debugStream = System.out;
   /** Set debug output. */
   public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
   private static final int jjStopStringLiteralDfa_0(int pos, long active0)
   {
      switch (pos)
      {
         case 0:
            if ((active0 & 0xffffeL) != 0L)
            {
               jjmatchedKind = 45;
               return 39;
            }
            return -1;
         case 1:
            if ((active0 & 0x3ffdeL) != 0L)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
               return 5;
            }
            if ((active0 & 0xc0020L) != 0L)
               return 5;
            return -1;
         case 2:
            if ((active0 & 0x3808L) != 0L)
               return 5;
            if ((active0 & 0x3c7d6L) != 0L)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 2;
               return 5;
            }
            return -1;
         case 3:
            if ((active0 & 0x14180L) != 0L)
               return 5;
            if ((active0 & 0x28656L) != 0L)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 3;
               return 5;
            }
            return -1;
         case 4:
            if ((active0 & 0x656L) != 0L)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 4;
               return 5;
            }
            if ((active0 & 0x28000L) != 0L)
               return 5;
            return -1;
         case 5:
            if ((active0 & 0x652L) != 0L)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 5;
               return 5;
            }
            if ((active0 & 0x4L) != 0L)
               return 5;
            return -1;
         case 6:
            if ((active0 & 0x642L) != 0L)
               return 5;
            if ((active0 & 0x10L) != 0L)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 6;
               return 5;
            }
            return -1;
         default :
            return -1;
      }
   }
   private static final int jjStartNfa_0(int pos, long active0)
   {
      return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
   }
   static private int jjStopAtPos(int pos, int kind)
   {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      return pos + 1;
   }
   static private int jjStartNfaWithStates_0(int pos, int kind, int state)
   {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return pos + 1; }
      return jjMoveNfa_0(state, pos + 1);
   }
   static private int jjMoveStringLiteralDfa0_0()
   {
      switch(curChar)
      {
         case 13:
            jjmatchedKind = 51;
            return jjMoveStringLiteralDfa1_0(0x80000000000000L);
         case 33:
            jjmatchedKind = 42;
            return jjMoveStringLiteralDfa1_0(0x2000000000L);
         case 37:
            jjmatchedKind = 33;
            return jjMoveStringLiteralDfa1_0(0x400000000L);
         case 38:
            return jjStopAtPos(0, 44);
         case 40:
            return jjStopAtPos(0, 20);
         case 41:
            return jjStopAtPos(0, 21);
         case 42:
            jjmatchedKind = 30;
            return jjMoveStringLiteralDfa1_0(0x100000000L);
         case 43:
            return jjStopAtPos(0, 28);
         case 44:
            return jjStopAtPos(0, 26);
         case 45:
            return jjStopAtPos(0, 29);
         case 46:
            return jjStopAtPos(0, 27);
         case 47:
            return jjStopAtPos(0, 31);
         case 58:
            return jjMoveStringLiteralDfa1_0(0x4000000000000L);
         case 60:
            jjmatchedKind = 38;
            return jjMoveStringLiteralDfa1_0(0x8000000000L);
         case 61:
            jjmatchedKind = 35;
            return jjMoveStringLiteralDfa1_0(0x1000000000L);
         case 62:
            jjmatchedKind = 40;
            return jjMoveStringLiteralDfa1_0(0x20000000000L);
         case 91:
            return jjStopAtPos(0, 24);
         case 93:
            return jjStopAtPos(0, 25);
         case 98:
            return jjMoveStringLiteralDfa1_0(0x40L);
         case 99:
            return jjMoveStringLiteralDfa1_0(0x80L);
         case 100:
            return jjMoveStringLiteralDfa1_0(0x40004L);
         case 101:
            return jjMoveStringLiteralDfa1_0(0x400L);
         case 102:
            return jjMoveStringLiteralDfa1_0(0x20000L);
         case 103:
            return jjMoveStringLiteralDfa1_0(0x1000L);
         case 105:
            return jjMoveStringLiteralDfa1_0(0x20L);
         case 108:
            return jjMoveStringLiteralDfa1_0(0x4000L);
         case 110:
            return jjMoveStringLiteralDfa1_0(0x208L);
         case 112:
            return jjMoveStringLiteralDfa1_0(0x2002L);
         case 114:
            return jjMoveStringLiteralDfa1_0(0x100L);
         case 115:
            return jjMoveStringLiteralDfa1_0(0x800L);
         case 116:
            return jjMoveStringLiteralDfa1_0(0x90000L);
         case 118:
            return jjMoveStringLiteralDfa1_0(0x10L);
         case 119:
            return jjMoveStringLiteralDfa1_0(0x8000L);
         case 123:
            return jjStopAtPos(0, 22);
         case 124:
            return jjStopAtPos(0, 43);
         case 125:
            return jjStopAtPos(0, 23);
         default :
            return jjMoveNfa_0(11, 0);
      }
   }
   static private int jjMoveStringLiteralDfa1_0(long active0)
   {
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(0, active0);
         return 1;
      }
      switch(curChar)
      {
         case 10:
            if ((active0 & 0x80000000000000L) != 0L)
               return jjStopAtPos(1, 55);
            break;
         case 37:
            if ((active0 & 0x400000000L) != 0L)
               return jjStopAtPos(1, 34);
            break;
         case 42:
            if ((active0 & 0x100000000L) != 0L)
               return jjStopAtPos(1, 32);
            break;
         case 45:
            if ((active0 & 0x4000000000000L) != 0L)
               return jjStopAtPos(1, 50);
            break;
         case 61:
            if ((active0 & 0x1000000000L) != 0L)
               return jjStopAtPos(1, 36);
            else if ((active0 & 0x2000000000L) != 0L)
               return jjStopAtPos(1, 37);
            else if ((active0 & 0x8000000000L) != 0L)
               return jjStopAtPos(1, 39);
            else if ((active0 & 0x20000000000L) != 0L)
               return jjStopAtPos(1, 41);
            break;
         case 97:
            return jjMoveStringLiteralDfa2_0(active0, 0x20210L);
         case 101:
            return jjMoveStringLiteralDfa2_0(active0, 0x1904L);
         case 104:
            return jjMoveStringLiteralDfa2_0(active0, 0x8080L);
         case 111:
            if ((active0 & 0x40000L) != 0L)
               return jjStartNfaWithStates_0(1, 18, 5);
            else if ((active0 & 0x80000L) != 0L)
               return jjStartNfaWithStates_0(1, 19, 5);
            return jjMoveStringLiteralDfa2_0(active0, 0x4048L);
         case 114:
            return jjMoveStringLiteralDfa2_0(active0, 0x10002L);
         case 115:
            if ((active0 & 0x20L) != 0L)
               return jjStartNfaWithStates_0(1, 5, 5);
            break;
         case 117:
            return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
         case 120:
            return jjMoveStringLiteralDfa2_0(active0, 0x400L);
         default :
            break;
      }
      return jjStartNfa_0(0, active0);
   }
   static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(0, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(1, active0);
         return 2;
      }
      switch(curChar)
      {
         case 97:
            return jjMoveStringLiteralDfa3_0(active0, 0x180L);
         case 101:
            return jjMoveStringLiteralDfa3_0(active0, 0x400L);
         case 102:
            return jjMoveStringLiteralDfa3_0(active0, 0x4L);
         case 105:
            return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
         case 108:
            return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
         case 111:
            return jjMoveStringLiteralDfa3_0(active0, 0x4042L);
         case 114:
            return jjMoveStringLiteralDfa3_0(active0, 0x10L);
         case 116:
            if ((active0 & 0x8L) != 0L)
               return jjStartNfaWithStates_0(2, 3, 5);
            else if ((active0 & 0x800L) != 0L)
               return jjStartNfaWithStates_0(2, 11, 5);
            else if ((active0 & 0x1000L) != 0L)
               return jjStartNfaWithStates_0(2, 12, 5);
            else if ((active0 & 0x2000L) != 0L)
               return jjStartNfaWithStates_0(2, 13, 5);
            return jjMoveStringLiteralDfa3_0(active0, 0x200L);
         case 117:
            return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
         default :
            break;
      }
      return jjStartNfa_0(1, active0);
   }
   static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(1, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(2, active0);
         return 3;
      }
      switch(curChar)
      {
         case 99:
            return jjMoveStringLiteralDfa4_0(active0, 0x400L);
         case 101:
            if ((active0 & 0x10000L) != 0L)
               return jjStartNfaWithStates_0(3, 16, 5);
            break;
         case 103:
            return jjMoveStringLiteralDfa4_0(active0, 0x2L);
         case 105:
            return jjMoveStringLiteralDfa4_0(active0, 0x14L);
         case 108:
            if ((active0 & 0x100L) != 0L)
               return jjStartNfaWithStates_0(3, 8, 5);
            return jjMoveStringLiteralDfa4_0(active0, 0x8040L);
         case 112:
            if ((active0 & 0x4000L) != 0L)
               return jjStartNfaWithStates_0(3, 14, 5);
            break;
         case 114:
            if ((active0 & 0x80L) != 0L)
               return jjStartNfaWithStates_0(3, 7, 5);
            break;
         case 115:
            return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
         case 117:
            return jjMoveStringLiteralDfa4_0(active0, 0x200L);
         default :
            break;
      }
      return jjStartNfa_0(2, active0);
   }
   static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(2, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(3, active0);
         return 4;
      }
      switch(curChar)
      {
         case 97:
            return jjMoveStringLiteralDfa5_0(active0, 0x10L);
         case 101:
            if ((active0 & 0x8000L) != 0L)
               return jjStartNfaWithStates_0(4, 15, 5);
            else if ((active0 & 0x20000L) != 0L)
               return jjStartNfaWithStates_0(4, 17, 5);
            return jjMoveStringLiteralDfa5_0(active0, 0x40L);
         case 110:
            return jjMoveStringLiteralDfa5_0(active0, 0x4L);
         case 114:
            return jjMoveStringLiteralDfa5_0(active0, 0x202L);
         case 117:
            return jjMoveStringLiteralDfa5_0(active0, 0x400L);
         default :
            break;
      }
      return jjStartNfa_0(3, active0);
   }
   static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(3, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(4, active0);
         return 5;
      }
      switch(curChar)
      {
         case 97:
            return jjMoveStringLiteralDfa6_0(active0, 0x242L);
         case 98:
            return jjMoveStringLiteralDfa6_0(active0, 0x10L);
         case 101:
            if ((active0 & 0x4L) != 0L)
               return jjStartNfaWithStates_0(5, 2, 5);
            break;
         case 116:
            return jjMoveStringLiteralDfa6_0(active0, 0x400L);
         default :
            break;
      }
      return jjStartNfa_0(4, active0);
   }
   static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(4, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(5, active0);
         return 6;
      }
      switch(curChar)
      {
         case 101:
            if ((active0 & 0x400L) != 0L)
               return jjStartNfaWithStates_0(6, 10, 5);
            break;
         case 108:
            if ((active0 & 0x200L) != 0L)
               return jjStartNfaWithStates_0(6, 9, 5);
            return jjMoveStringLiteralDfa7_0(active0, 0x10L);
         case 109:
            if ((active0 & 0x2L) != 0L)
               return jjStartNfaWithStates_0(6, 1, 5);
            break;
         case 110:
            if ((active0 & 0x40L) != 0L)
               return jjStartNfaWithStates_0(6, 6, 5);
            break;
         default :
            break;
      }
      return jjStartNfa_0(5, active0);
   }
   static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(5, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(6, active0);
         return 7;
      }
      switch(curChar)
      {
         case 101:
            if ((active0 & 0x10L) != 0L)
               return jjStartNfaWithStates_0(7, 4, 5);
            break;
         default :
            break;
      }
      return jjStartNfa_0(6, active0);
   }
   static final long[] jjbitVec0 = {
           0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
   };
   static private int jjMoveNfa_0(int startState, int curPos)
   {
      //int[] nextStates; // not used
      int startsAt = 0;
      jjnewStateCnt = 39;
      int i = 1;
      jjstateSet[0] = startState;
      //int j; // not used
      int kind = 0x7fffffff;
      for (;;)
      {
         if (++jjround == 0x7fffffff)
            ReInitRounds();
         if (curChar < 64)
         {
            long l = 1L << curChar;
            do
            {
               switch(jjstateSet[--i])
               {
                  case 11:
                     if ((0x3ff000000000000L & l) != 0L)
                     {
                        if (kind > 46)
                           kind = 46;
                        jjCheckNAddTwoStates(12, 15);
                     }
                     else if (curChar == 39)
                        jjCheckNAddStates(0, 2);
                     else if (curChar == 34)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 39:
                  case 7:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjCheckNAddStates(6, 8);
                     break;
                  case 5:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjCheckNAddStates(6, 8);
                     if ((0x3ff000000000000L & l) != 0L)
                        jjCheckNAdd(6);
                     break;
                  case 3:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjAddStates(9, 10);
                     break;
                  case 12:
                     if (curChar == 46)
                        jjstateSet[jjnewStateCnt++] = 13;
                     break;
                  case 13:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 46)
                        kind = 46;
                     jjstateSet[jjnewStateCnt++] = 14;
                     break;
                  case 14:
                     if ((0x3ff000000000000L & l) != 0L && kind > 46)
                        kind = 46;
                     break;
                  case 15:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddTwoStates(16, 12);
                     break;
                  case 16:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(12);
                     break;
                  case 17:
                     if (curChar == 34)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 18:
                     if ((0xffffff7effffdbffL & l) != 0L)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 20:
                     if ((0x8400000000L & l) != 0L)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 21:
                     if (curChar == 34 && kind > 47)
                        kind = 47;
                     break;
                  case 23:
                     if (curChar == 43)
                        jjstateSet[jjnewStateCnt++] = 24;
                     break;
                  case 24:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 25;
                     break;
                  case 25:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 26;
                     break;
                  case 26:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 27;
                     break;
                  case 27:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 28:
                     if (curChar == 39)
                        jjCheckNAddStates(0, 2);
                     break;
                  case 29:
                     if ((0xffffff7effffdbffL & l) != 0L)
                        jjCheckNAddStates(0, 2);
                     break;
                  case 31:
                     if ((0x8400000000L & l) != 0L)
                        jjCheckNAddStates(0, 2);
                     break;
                  case 32:
                     if (curChar == 39 && kind > 47)
                        kind = 47;
                     break;
                  case 34:
                     if (curChar == 43)
                        jjstateSet[jjnewStateCnt++] = 35;
                     break;
                  case 35:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 36;
                     break;
                  case 36:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 37;
                     break;
                  case 37:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 38;
                     break;
                  case 38:
                     if ((0x3ff000000000000L & l) != 0L)
                        jjCheckNAddStates(0, 2);
                     break;
                  default : break;
               }
            } while(i != startsAt);
         }
         else if (curChar < 128)
         {
            long l = 1L << (curChar & 077);
            do
            {
               switch(jjstateSet[--i])
               {
                  case 11:
                  case 0:
                     if ((0x7fffffe87fffffeL & l) == 0L)
                        break;
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddTwoStates(1, 7);
                     break;
                  case 39:
                  case 1:
                     if ((0x7fffffe07fffffeL & l) == 0L)
                        break;
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddStates(11, 15);
                     break;
                  case 5:
                     if ((0x7fffffe07fffffeL & l) != 0L)
                     {
                        if (kind > 45)
                           kind = 45;
                        jjCheckNAddStates(11, 15);
                     }
                     else if (curChar == 95)
                     {
                        if (kind > 45)
                           kind = 45;
                        jjCheckNAddTwoStates(1, 7);
                     }
                     if (curChar == 95)
                        jjstateSet[jjnewStateCnt++] = 3;
                     break;
                  case 2:
                     if (curChar == 95)
                        jjstateSet[jjnewStateCnt++] = 3;
                     break;
                  case 4:
                     if ((0x7fffffe07fffffeL & l) != 0L)
                        jjCheckNAdd(2);
                     break;
                  case 6:
                     if (curChar != 95)
                        break;
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddTwoStates(1, 7);
                     break;
                  case 8:
                     if (curChar == 95)
                        jjstateSet[jjnewStateCnt++] = 9;
                     break;
                  case 9:
                     if ((0x7fffffe07fffffeL & l) == 0L)
                        break;
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddTwoStates(1, 7);
                     break;
                  case 10:
                     if ((0x7fffffe07fffffeL & l) != 0L)
                        jjCheckNAddTwoStates(10, 6);
                     break;
                  case 18:
                     if ((0xffffffffefffffffL & l) != 0L)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 19:
                     if (curChar == 92)
                        jjAddStates(16, 17);
                     break;
                  case 20:
                     if ((0x14404410000000L & l) != 0L)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 22:
                     if ((0x20000000200000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 23;
                     break;
                  case 24:
                     if ((0x7e0000007eL & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 25;
                     break;
                  case 25:
                     if ((0x7e0000007eL & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 26;
                     break;
                  case 26:
                     if ((0x7e0000007eL & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 27;
                     break;
                  case 27:
                     if ((0x7e0000007eL & l) != 0L)
                        jjCheckNAddStates(3, 5);
                     break;
                  case 29:
                     if ((0xffffffffefffffffL & l) != 0L)
                        jjCheckNAddStates(0, 2);
                     break;
                  case 30:
                     if (curChar == 92)
                        jjAddStates(18, 19);
                     break;
                  case 31:
                     if ((0x14404410000000L & l) != 0L)
                        jjCheckNAddStates(0, 2);
                     break;
                  case 33:
                     if ((0x20000000200000L & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 34;
                     break;
                  case 35:
                     if ((0x7e0000007eL & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 36;
                     break;
                  case 36:
                     if ((0x7e0000007eL & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 37;
                     break;
                  case 37:
                     if ((0x7e0000007eL & l) != 0L)
                        jjstateSet[jjnewStateCnt++] = 38;
                     break;
                  case 38:
                     if ((0x7e0000007eL & l) != 0L)
                        jjCheckNAddStates(0, 2);
                     break;
                  default : break;
               }
            } while(i != startsAt);
         }
         else
         {
            int i2 = (curChar & 0xff) >> 6;
            long l2 = 1L << (curChar & 077);
            do
            {
               switch(jjstateSet[--i])
               {
                  case 18:
                     if ((jjbitVec0[i2] & l2) != 0L)
                        jjAddStates(3, 5);
                     break;
                  case 29:
                     if ((jjbitVec0[i2] & l2) != 0L)
                        jjAddStates(0, 2);
                     break;
                  default : break;
               }
            } while(i != startsAt);
         }
         if (kind != 0x7fffffff)
         {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
         }
         ++curPos;
         if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt)))
            return curPos;
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { return curPos; }
      }
   }
   static final int[] jjnextStates = {
           29, 30, 32, 18, 19, 21, 8, 10, 6, 4, 0, 2, 5, 6, 1, 7,
           20, 22, 31, 33,
   };

   /** Token literal values. */
   public static final String[] jjstrLiteralImages = {
           "", "\160\162\157\147\162\141\155", "\144\145\146\151\156\145",
           "\156\157\164", "\166\141\162\151\141\142\154\145", "\151\163",
           "\142\157\157\154\145\141\156", "\143\150\141\162", "\162\145\141\154", "\156\141\164\165\162\141\154",
           "\145\170\145\143\165\164\145", "\163\145\164", "\147\145\164", "\160\165\164", "\154\157\157\160",
           "\167\150\151\154\145", "\164\162\165\145", "\146\141\154\163\145", "\144\157", "\164\157", "\50",
           "\51", "\173", "\175", "\133", "\135", "\54", "\56", "\53", "\55", "\52", "\57",
           "\52\52", "\45", "\45\45", "\75", "\75\75", "\41\75", "\74", "\74\75", "\76", "\76\75",
           "\41", "\174", "\46", null, null, null, null, null, null, null, null, null, null,
           null, null, };

   /** Lexer state names. */
   public static final String[] lexStateNames = {
           "DEFAULT",
   };
   static final long[] jjtoToken = {
           0xffffffffffffL,
   };
   static final long[] jjtoSkip = {
           0x1fc000000000000L,
   };
   static protected SimpleCharStream input_stream;
   static private final int[] jjrounds = new int[39];
   static private final int[] jjstateSet = new int[78];
   static StringBuffer image;
   static int jjimageLen;
   static int lengthOfMatch;
   static protected char curChar;
   /** Constructor. */
   public AnalisadorLexicoTokenManager(SimpleCharStream stream){
      if (input_stream != null)
         throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
      input_stream = stream;
   }

   /** Constructor. */
   public AnalisadorLexicoTokenManager(SimpleCharStream stream, int lexState){
      this(stream);
      SwitchTo(lexState);
   }

   /** Reinitialise parser. */
   static public void ReInit(SimpleCharStream stream)
   {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      mensages_manhosas = new StringBuffer();
      ReInitRounds();
   }
   static private void ReInitRounds()
   {
      int i;
      jjround = 0x80000001;
      for (i = 39; i-- > 0;)
         jjrounds[i] = 0x80000000;
   }

   /** Reinitialise parser. */
   static public void ReInit(SimpleCharStream stream, int lexState)
   {
      ReInit(stream);
      SwitchTo(lexState);
   }

   /** Switch to specified lex state. */
   static public void SwitchTo(int lexState)
   {
      if (lexState >= 1 || lexState < 0)
         throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
      else
         curLexState = lexState;
   }

   static protected Token jjFillToken()
   {
      final Token t;
      final String tokenImage;
      final int beginLine;
      final int endLine;
      final int beginColumn;
      final int endColumn;
      String im = jjstrLiteralImages[jjmatchedKind];
      tokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
      t = Token.newToken(jjmatchedKind);
      t.kind = jjmatchedKind;
      t.image = tokenImage;

      t.beginLine = beginLine;
      t.endLine = endLine;
      t.beginColumn = beginColumn;
      t.endColumn = endColumn;

      return t;
   }

   static int curLexState = 0;
   static int defaultLexState = 0;
   static int jjnewStateCnt;
   static int jjround;
   static int jjmatchedPos;
   static int jjmatchedKind;

   /** Get the next Token. */
   public static Token getNextToken()
   {
      //int kind;
      Token specialToken = null;
      Token matchedToken;
      int curPos = 0;

      EOFLoop :
      for (;;)
      {
         try
         {
            curChar = input_stream.BeginToken();
         }
         catch(java.io.IOException e)
         {
            jjmatchedKind = 0;
            matchedToken = jjFillToken();
            return matchedToken;
         }
         image = null;
         jjimageLen = 0;

         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedKind != 0x7fffffff)
         {
            if (jjmatchedPos + 1 < curPos)
               input_stream.backup(curPos - jjmatchedPos - 1);
            if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
            {
               matchedToken = jjFillToken();
               TokenLexicalActions(matchedToken);
               return matchedToken;
            }
            else
            {
               SkipLexicalActions(null);
               continue EOFLoop;
            }
         }
         int error_line = input_stream.getEndLine();
         int error_column = input_stream.getEndColumn();
         String error_after = null;
         boolean EOFSeen = false;
         try { input_stream.readChar(); input_stream.backup(1); }
         catch (java.io.IOException e1) {
            EOFSeen = true;
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
            if (curChar == '\n' || curChar == '\r') {
               error_line++;
               error_column = 0;
            }
            else
               error_column++;
         }
         if (!EOFSeen) {
            input_stream.backup(1);
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
         }

         TokenMgrError erro_token =    new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
         String msgerrorrrr =   mensages_manhosas.toString().trim() + "\n" +   erro_token.getMessage().trim();
         mensages_manhosas.delete(0, mensages_manhosas.length());
         mensages_manhosas.append(msgerrorrrr);
         jjmatchedKind = 0;
         matchedToken = jjFillToken();
         return matchedToken;
      }
   }

   static void SkipLexicalActions(Token matchedToken)
   {
      switch(jjmatchedKind)
      {
         case 50 :
            if (image == null)
               image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            mensages_manhosas.append("COMENTARIO -> "+image+"\r\n");
            break;
         default :
            break;
      }
   }
   static void TokenLexicalActions(Token matchedToken)
   {
      switch(jjmatchedKind)
      {
         case 1 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[1]);
            lengthOfMatch = jjstrLiteralImages[1].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 2 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[2]);
            lengthOfMatch = jjstrLiteralImages[2].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 3 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[3]);
            lengthOfMatch = jjstrLiteralImages[3].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 4 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[4]);
            lengthOfMatch = jjstrLiteralImages[4].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 5 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[5]);
            lengthOfMatch = jjstrLiteralImages[5].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 6 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[6]);
            lengthOfMatch = jjstrLiteralImages[6].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "\r\n");
            break;
         case 7 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[7]);
            lengthOfMatch = jjstrLiteralImages[7].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "\r\n");
            break;
         case 8 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[8]);
            lengthOfMatch = jjstrLiteralImages[8].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS TIPO DE VARIAVEL->" + image + "\r\n");
            break;
         case 9 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[9]);
            lengthOfMatch = jjstrLiteralImages[9].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 10 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[10]);
            lengthOfMatch = jjstrLiteralImages[10].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 11 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[11]);
            lengthOfMatch = jjstrLiteralImages[11].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 12 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[12]);
            lengthOfMatch = jjstrLiteralImages[12].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 13 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[13]);
            lengthOfMatch = jjstrLiteralImages[13].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 14 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[14]);
            lengthOfMatch = jjstrLiteralImages[14].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 15 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[15]);
            lengthOfMatch = jjstrLiteralImages[15].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 16 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[16]);
            lengthOfMatch = jjstrLiteralImages[16].length();
            mensages_manhosas.append("PALAVRA RESERVADA TIPO BOOLEANO->" + image + "\r\n");
            break;
         case 17 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[17]);
            lengthOfMatch = jjstrLiteralImages[17].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS TIPO BOOLEANO->" + image + "\r\n");
            break;
         case 18 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[18]);
            lengthOfMatch = jjstrLiteralImages[18].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 19 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[19]);
            lengthOfMatch = jjstrLiteralImages[19].length();
            mensages_manhosas.append("PALAVRAS RESERVADAS ->" + image + "\r\n");
            break;
         case 20 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[20]);
            lengthOfMatch = jjstrLiteralImages[20].length();
            mensages_manhosas.append("SIMBOLOS -> "+image+"\r\n");
            break;
         case 21 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[21]);
            lengthOfMatch = jjstrLiteralImages[21].length();
            mensages_manhosas.append("SIMBOLOS -> "+image+"\r\n");
            break;
         case 22 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[22]);
            lengthOfMatch = jjstrLiteralImages[22].length();
            mensages_manhosas.append("SIMBOLOS -> "+image+"\r\n");
            break;
         case 23 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[23]);
            lengthOfMatch = jjstrLiteralImages[23].length();
            mensages_manhosas.append("SIMBOLOS -> "+image+"\r\n");
            break;
         case 24 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[24]);
            lengthOfMatch = jjstrLiteralImages[24].length();
            mensages_manhosas.append("SIMBOLOS -> "+image+"\r\n");
            break;
         case 25 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[25]);
            lengthOfMatch = jjstrLiteralImages[25].length();
            mensages_manhosas.append("SIMBOLOS -> "+image+"\r\n");
            break;
         case 26 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[26]);
            lengthOfMatch = jjstrLiteralImages[26].length();
            mensages_manhosas.append("SIMBOLOS -> "+image+"\r\n");
            break;
         case 27 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[27]);
            lengthOfMatch = jjstrLiteralImages[27].length();
            mensages_manhosas.append("SIMBOLOS-> "+image+"\r\n");
            break;
         case 28 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[28]);
            lengthOfMatch = jjstrLiteralImages[28].length();
            mensages_manhosas.append("OP ARITMETICO - ADICAO -> "+image+"\r\n");
            break;
         case 29 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[29]);
            lengthOfMatch = jjstrLiteralImages[29].length();
            mensages_manhosas.append("OP ARITMETICO - SUBTRACAO -> "+image+"\r\n");
            break;
         case 30 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[30]);
            lengthOfMatch = jjstrLiteralImages[30].length();
            mensages_manhosas.append("OP ARITMETICO - MULTIPLICACAO -> "+image+"\r\n");
            break;
         case 31 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[31]);
            lengthOfMatch = jjstrLiteralImages[31].length();
            mensages_manhosas.append("OP ARITMETICO - DIVISAO -> "+image+"\r\n");
            break;
         case 32 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[32]);
            lengthOfMatch = jjstrLiteralImages[32].length();
            mensages_manhosas.append("OP ARITMETICO - POTENCIA -> "+image+"\r\n");
            break;
         case 33 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[33]);
            lengthOfMatch = jjstrLiteralImages[33].length();
            mensages_manhosas.append("OP ARITMETICO - DIVISAOINTEIRA -> "+image+"\r\n");
            break;
         case 34 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[34]);
            lengthOfMatch = jjstrLiteralImages[34].length();
            mensages_manhosas.append("OP ARITMETICO - RESTODIVISAOINTEIRA -> "+image+"\r\n");
            break;
         case 35 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[35]);
            lengthOfMatch = jjstrLiteralImages[35].length();
            mensages_manhosas.append("OP ARITMETICO - IGUAL/RECEBE -> "+image+"\r\n");
            break;
         case 36 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[36]);
            lengthOfMatch = jjstrLiteralImages[36].length();
            mensages_manhosas.append("OP RELACIONAIS - EQUIVALENTE -> "+image+"\r\n");
            break;
         case 37 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[37]);
            lengthOfMatch = jjstrLiteralImages[37].length();
            mensages_manhosas.append("OP RELACIONAIS - DIFERENTE -> "+image+"\r\n");
            break;
         case 38 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[38]);
            lengthOfMatch = jjstrLiteralImages[38].length();
            mensages_manhosas.append("OP RELACIONAIS - MENOR -> "+image+"\r\n");
            break;
         case 39 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[39]);
            lengthOfMatch = jjstrLiteralImages[39].length();
            mensages_manhosas.append("OP RELACIONAIS - MENOROUIGUAL -> "+image+"\r\n");
            break;
         case 40 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[40]);
            lengthOfMatch = jjstrLiteralImages[40].length();
            mensages_manhosas.append("OP RELACIONAIS - MAIOR -> "+image+"\r\n");
            break;
         case 41 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[41]);
            lengthOfMatch = jjstrLiteralImages[41].length();
            mensages_manhosas.append("OP RELACIONAIS - MAIOROUIGUAL -> "+image+"\r\n");
            break;
         case 42 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[42]);
            lengthOfMatch = jjstrLiteralImages[42].length();
            mensages_manhosas.append("OP LOGICOS - NAO -> "+image+"\r\n");
            break;
         case 43 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[43]);
            lengthOfMatch = jjstrLiteralImages[43].length();
            mensages_manhosas.append("OP LOGICOS - OU -> "+image+"\r\n");
            break;
         case 44 :
            if (image == null)
               image = new StringBuffer();
            image.append(jjstrLiteralImages[44]);
            lengthOfMatch = jjstrLiteralImages[44].length();
            mensages_manhosas.append("OP LOGICOS - E -> "+image+"\r\n");
            break;
         case 45 :
            if (image == null)
               image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            mensages_manhosas.append("IDENTIFICADOR -> "+image+"\r\n");
            break;
         case 46 :
            if (image == null)
               image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            mensages_manhosas.append("CONSTANTE_NUM -> "+image+"\r\n");
            break;
         case 47 :
            if (image == null)
               image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            mensages_manhosas.append("CONSTANTE_LIT -> "+image+"\r\n");
            break;
         default :
            break;
      }
   }
   static private void jjCheckNAdd(int state)
   {
      if (jjrounds[state] != jjround)
      {
         jjstateSet[jjnewStateCnt++] = state;
         jjrounds[state] = jjround;
      }
   }
   static private void jjAddStates(int start, int end)
   {
      do {
         jjstateSet[jjnewStateCnt++] = jjnextStates[start];
      } while (start++ != end);
   }
   static private void jjCheckNAddTwoStates(int state1, int state2)
   {
      jjCheckNAdd(state1);
      jjCheckNAdd(state2);
   }

   static private void jjCheckNAddStates(int start, int end)
   {
      do {
         jjCheckNAdd(jjnextStates[start]);
      } while (start++ != end);
   }
   //manter função ela retornar as mensagens pro analisador lexico
   public String getMensagesManhosas(){
      return mensages_manhosas.toString();
   }
}
