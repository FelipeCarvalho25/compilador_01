package Analisadores;/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 4.1 */
/* JavaCCOptions:KEEP_LINE_COL=null */
/**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */
public class ParseException extends Exception {

  /**
   * This constructor is used by the method "generateParseException"
   * in the generated parser.  Calling this constructor generates
   * a new object of this type with the fields "currentToken",
   * "expectedTokenSequences", and "tokenImage" set.  The boolean
   * flag "specialConstructor" is also set to true to indicate that
   * this constructor was used to create this object.
   * This constructor calls its super class with the empty string
   * to force the "toString" method of parent class "Throwable" to
   * print the error message in the form:
   *     ParseException: <result of getMessage>
   */
  public ParseException(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal
                       )
  {
    super("");
    specialConstructor = true;
    currentToken = currentTokenVal;
    expectedTokenSequences = expectedTokenSequencesVal;
    tokenImage = tokenImageVal;
  }

  /**
   * The following constructors are for use by you for whatever
   * purpose you can think of.  Constructing the exception in this
   * manner makes the exception behave in the normal way - i.e., as
   * documented in the class "Throwable".  The fields "errorToken",
   * "expectedTokenSequences", and "tokenImage" do not contain
   * relevant information.  The JavaCC generated code does not use
   * these constructors.
   */

  public ParseException() {
    super();
    specialConstructor = false;
  }

  /** Constructor with message. */
  public ParseException(String message) {
    super(message);
    specialConstructor = false;
  }

  /**
   * This variable determines which constructor was used to create
   * this object and thereby affects the semantics of the
   * "getMessage" method (see below).
   */
  protected boolean specialConstructor;

  /**
   * This is the last token that has been consumed successfully.  If
   * this object has been created due to a parse error, the token
   * followng this token will (therefore) be the first error token.
   */
  public Token currentToken;

  /**
   * Each entry in this array is an array of integers.  Each array
   * of integers represents a sequence of tokens (by their ordinal
   * values) that is expected at this point of the parse.
   */
  public int[][] expectedTokenSequences;

  /**
   * This is a reference to the "tokenImage" array of the generated
   * parser within which the parse error occurred.  This array is
   * defined in the generated ...Constants interface.
   */
  public String[] tokenImage;

  /**
   * This method has the standard behavior when this object has been
   * created using the standard constructors.  Otherwise, it uses
   * "currentToken" and "expectedTokenSequences" to generate a parse
   * error message and returns it.  If this object has been created
   * due to a parse error, and you do not catch it (it gets thrown
   * from the parser), then this method is called during the printing
   * of the final stack trace, and hence the correct error message
   * gets displayed.
   */
  public String[] tokensexpressao = {"==","!=","<",">","<=",">=","+","-","|","*","/","%","%%","&","**"};
  public String getMessage() {
    if (!specialConstructor) {
      return super.getMessage();
    }
    StringBuffer expected = new StringBuffer();
    String esperado = "";
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected.append("...");
      }
      expected.append(", ").append("    ");
    }
    String retval = "";

    if((tokenImage[currentToken.next.kind].equals("<EOF>")) && (expected.indexOf("}") >= 0) && (currentToken.image.equals("{"))){  //Mensagem programa finalizado incorretamente
            retval += "\n" + "\n" + "ERRO (03)---> Programa Finalizado Incorretamente. ";
            esperado += "}" ;
    }else if(expected.indexOf("{") >= 0 && tokenImage[currentToken.next.kind].contains("}") ){  //Mensagem funcao finalizada incorretamente
          retval += "\n" + "\n" + "ERRO (04)---> Programa ou função não foi iniciada corretamente,  ";
            esperado += "{" ;
    }
    else if(expected.indexOf("<PROGRAM>") >= 0 && tokenImage[currentToken.next.kind].contains("<IDENTIFICADOR>") ){
        retval += "\n" + "\n" + "ERRO (05)---> Programa inicializado incorretamente,   ";
        esperado += "Program" ;
    }
    else if(expected.toString().contains("DEFINE") || expected.toString().contains("EXECUTE") ) {
        retval += "\n" + "\n" + "ERRO (14)---> Erro no corpo do programa,   ";
        esperado += " define, execute";

    }

    else if(currentToken.image.equals("define")) {
        retval += "\n" + "\n" + "ERRO (10)---> Erro na inicializacao de variaveis,   ";
        esperado += " not, variable";

      }
     else if(expected.indexOf("<VARIABLE>") >= 0 && expected.indexOf("<NOT>") >= 0){
        retval += "\n" + "\n" + "ERRO (10)---> Erro na inicializacao de variaveis,   ";
        esperado += " not, variable";
    }
    else if(currentToken.image.equals("variable") &&  (expected.indexOf("<BOOLEAN>") >= 0 && expected.indexOf("<CHAR>") >= 0)){
        retval += "\n" + "\n" + "ERRO (10)---> Erro na inicializacao de variaveis,   ";
        esperado += " tipo (natural, char,..)";
    }
    else if(currentToken.image.equals("not") && expected.indexOf("<VARIABLE>") >= 0 ){
        retval += "\n" + "\n" + "ERRO (10)---> Erro na inicializacao de variaveis,   ";
        esperado += "variable";
    }
    else if(expected.indexOf("<IS>") >= 0  ){
        retval += "\n" + "\n" + "ERRO (10)---> Erro na inicializacao de variaveis,   ";
        esperado += "is" ;
    }
    else if(currentToken.image.equals("is") && expected.indexOf("<IDENTIFICADOR>") >= 0 ){
        retval += "\n" + "\n" + "ERRO (10)---> Erro na inicializacao de variaveis,   ";
        esperado += "identificador" ;
    }
    else if(currentToken.image.equals("execute")){
        retval += "\n" + "\n" + "ERRO (06)---> Corpo do programa inicializado incorretamente,   ";
    }
    else if(currentToken.next.image.equals("to")){  //Mensagem expressão invalida
          retval += "\n" + "\n" + "ERRO (07)---> Expressão Inválida,   ";
    }
      else if(currentToken.next.image.equals(")")
              || (currentToken.image.equals("+"))
              || (currentToken.image.equals("-"))
              || (currentToken.image.equals("*"))
              || (currentToken.image.equals("/"))
              || (currentToken.image.equals("=="))
              || (currentToken.image.equals(">="))
              || (currentToken.image.equals("<="))
              || (currentToken.image.equals(">"))
              || (currentToken.image.equals("<"))

      ){  //Mensagem expressão invalida
          retval += "\n" + "\n" + "ERRO (07)---> Expressão Inválida,   ";
      }
    else if((currentToken.image.equals("(")) && (currentToken.next.image.equals(")"))){  //Mensagem expressão VAZIA
          retval += "\n" + "\n" + "ERRO (07)---> Expressão Inválida,   ";
    }
    else if(((!(currentToken.image.equals("<IDENTIFICADOR>")))
            || (!(currentToken.image.equals("<CONSTANTE_NUM_REAL>")))
            || (!(currentToken.image.equals("<CONSTANTE_NUM_INT>")))
            || (!(currentToken.image.equals("<CONSTANTE_LIT>"))))
            && (currentToken.next.image.equals("is"))){  //Mensagem expressão VAZIA
          retval += "\n" + "\n" + "ERRO (07)---> Expressão Inválida,   ";
    }
    else if(currentToken.image.equals("variable")){
        retval += "\n" + "\n" + "ERRO (08)---> TIPO Inválido,   ";
    }
    else if(currentToken.image.equals("get")
            || (currentToken.image.equals("put"))
            || (currentToken.image.equals("verify"))
            || (currentToken.image.equals("set"))
            || (currentToken.image.equals("loop"))
            || (currentToken.image.equals("while"))

      ){
        retval += "\n" + "\n" + "ERRO (09)---> COMANDO Inválido,   ";
    }
    else if(expected.toString().contains("SET")
            || (expected.toString().contains("GET"))
            || (expected.toString().contains("PUT"))
            || (expected.toString().contains("LOOP"))
            || (expected.toString().contains("WHILE"))
            || (expected.toString().contains("VERIFY"))
    ){
        retval += "\n" + "\n" + "ERRO (09)---> Comando Inválido,   ";
    }


    else if(currentToken.next.image.equals("[")
              || (currentToken.image.equals("]"))
    ) {
          retval += "\n" + "\n" + "ERRO (11)---> Vetor declarado incorretamente,   ";
      }

        else if(expected.toString().contains("\".\"")){
        retval += "\n" + "\n" + "ERRO (12)---> Comando ou funcao finalizado incorretamente,   ";
        esperado += "'.'";
      }
    else if(expected.toString().contains("EXECUTE")){
        retval += "\n" + "\n" + "ERRO (13)---> Erro em corpo do programa,   ";
        esperado += "execute";
    }


    retval += "\n" + "Encontrado  \" ";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += " " + tokenImage[tok.kind];
      retval += " \"";
      retval += add_escapes(tok.image);
      retval += " \"";
      tok = tok.next; 
    }
    //manter mensagens em portuges
    retval += "\" na linha " + currentToken.next.beginLine + ", coluna " + currentToken.next.beginColumn;
    retval += "." + eol;
    if (expectedTokenSequences.length == 1) {
      retval += "Estava sendo esperado:" + eol  + "   ";
    } else {
      retval += "Estava sendo esperado um: " + eol + "   ";
    }
    retval += esperado;
    return retval;
  }

  /**
   * The end of line string for this machine.
   */
  protected String eol = System.getProperty("line.separator", "\n");
 
  /**
   * Used to convert raw characters to their escaped version
   * when these raw version cannot be used as part of an ASCII
   * string literal.
   */
  protected String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }

}
/* JavaCC - OriginalChecksum=be27c278eae3e59ae5dc26ba9cb2a93d (do not edit this line) */
